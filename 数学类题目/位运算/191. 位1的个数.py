'''
编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
'''
class Solution:
    def hammingWeight(self, n: int) -> int:
        # 计算1的个数 由n&n-1的可执行次数计算  因为n&n-1会把n的最后一个1变成0
        count = 0
        while n:
            n= n & (n - 1)
            count += 1
        return count

        # 进阶:如果多次调用这个函数，你将如何优化你的算法？
        # 参考https://leetcode-cn.com/problems/counting-bits/
        # 即  n为偶数 则n<<1 和 n>>1中1的个数相同
        #     n为奇数 则popcount(n) = popcount(n-1)
